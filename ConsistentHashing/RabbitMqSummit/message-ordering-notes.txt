# Message Ordering

## Number sequence
Loss of total ordering with competing consumers:
Cluster
Terminal (cluster): python declare-queue.py rabbitmq1 num-sequence 2 true

Client
Terminal 1: python send-sequence rabbitmq1 6 100 num-sequence
Terminal 2-5: python consumer.py rabbitmq2 num-sequence 10
Terminal 6: python output-consumer.py rabbitmq3


## State update sequence
--------------------------------------
Competing consumers
--------------------------------------

Cluster
Terminal: python declare-queue.py states-all 2 true

Client
Terminal 1: python send-state-updates-direct.py rabbitmq1 6 100 states-all 0 10
Terminal 2-5: python consumer.py rabbitmq2 states-all 10 0 10
Terminal 6: python output-consumer.py rabbitmq3

Note: show the impact on final ordering with a single consumer that is slower than the others

--------------------------------------
Hash Exchange
--------------------------------------
Cluster
Terminal: python declare-hashing-infra.py states states 20 2 true

Client
Terminal 1: python send-state-updates-hash-ex.py rabbitmq1 6 100 states
Terminal 2: python consumer.py rabbitmq2 states001 10 0 10
Terminal 3: python consumer.py rabbitmq3 states002 10 0 10
Terminal 4: python consumer.py rabbitmq4 states003 10 0 10
Terminal 5: python consumer.py rabbitmq5 states004 10 0 10
Terminal 6: python output-consumer.py rabbitmq3

Note: show that slowing down a consumer has no affect on final ordering